<div class="py-2">
    <div class="container">
      <div class="row">
        <div class="col-md-12">
          <h1 class="h1 text-center"><? echo $room->name ?></h1>
         
        </div>
        <?
    
    echo    $this->getContent();
    
    
   ?>
        <?
        
        if($user_room->role=='manager'){
                echo Phalcon\Tag::linkTo(
                    [
                        "room/edit/".$room->room_id,
                        'Редактировать',
                        "class" => "btn btn-primary",
                    ]
                );
              }
              ?>
      </div>
    </div>
  </div>

<style type="text/css">
  #message-box {
    width: 100%;
    display: inline-block;
    height: 300px;
    background: #fff;
    box-shadow: inset 0px 0px 2px #00000017;
    overflow: auto;
    padding: 10px;
}

</style>


<div class="py-5" >
    <div class="container">
      <div class="row">
        <div class="col-md-3" >
          <h3>Сообщения</h3>
           <div id="message-box">
            <?  foreach ($room->getMessage(['conditions' => 'room_room_id = '.$room->room_id]) as $message) {
        $item = User::findFirst($message->user_id);
        $username = $item->second_name . ' ' . $item->name;
?>
    <div class="list-group-item">
        <? echo $username.'<br>'.$message->date_time.'<br>';
            echo $message->text;
        ?>
    </div>
    <?
                    }
                ?>
              </div>
            
               
                
          <div class="card card-footer">
                   <form>
                    <?php echo $this->tag->textField(["text", "class" => 'w-100', "name"=>"message", "id"=>"message"]); ?>
                    <?php echo $this->tag->hiddenField(['room_id', "value" => $room->room_id]); ?>
                    <?php echo $this->tag->hiddenField(['user_id', "value" => $this->session->get('auth')['id']]);?>
                    <?php 
                        $item = User::findFirst($this->session->get('auth')['id']);
                        $usernames = $item->second_name . ' ' . $item->name;
                        echo $this->tag->hiddenField(['user_name', "value" => $usernames, "name"=>"name", "id"=>"name"]);?>
                    <button id="send-message" class = "btn btn-success w-100" >Отправить</button>
                    </form>
                
            </div>
        </div>
        <div class="col-md-6" >
          <center>
            <video id="localVideo" autoplay muted width="400" height="300"></video>
            <video id="remoteVideo" autoplay width="400" height="300"></video>
          </center>
        </div>
        <div class="col-md-3">
          <h3>Список выступающих</h3>
          <ul class="list-group list-group-flush" style="max-height: 50vh; overflow: auto;">
            
              <? 
              $us_id = array();

              foreach ($room->getUser(['conditions' => 'room_room_id = '.$room->room_id.' and role = "speaker"']) as $item){
                $username = $item->second_name . ' ' . $item->name;
                array_push($us_id, $item->user_id);
                ?>
              <li class="list-group-item">
                <?
              echo  $username;

              ?>
                

              </li><?}?>
           
          </ul>
        </div>
      </div>
    </div>
  </div>

  <div class="py-2" >
    <div class="container">
      <div class="row">
        <div class="col-md-9">
          <h3>Описание</h3>
          <p><? echo $room->description ?></p>
        </div>
        <div class="col-md-3">
           <h3>Дата создания</h3> <p><?echo $room->date ?> </p>
         </div>
      </div>
    </div>
  </div>
  
<script type="text/javascript">
var roomHash = '<? echo $room->room_id?>';
// TODO: Replace with your own channel ID
const drone = new ScaleDrone('yiS12Ts5RdNhebyM');
// Room name needs to be prefixed with 'observable-'
const roomName = 'observable-' + roomHash;
const configuration = {
  iceServers: [{
    urls: 'stun:stun.l.google.com:19302'
  }]
};
let room;
let pc;


function onSuccess() {};
function onError(error) {
  console.error(error);
};

drone.on('open', error => {
  if (error) {
    return console.error(error);
  }
  room = drone.subscribe(roomName);
  room.on('open', error => {
    if (error) {
      onError(error);
    }
  });
  // We're connected to the room and received an array of 'members'
  // connected to the room (including us). Signaling server is ready.
  room.on('members', members => {
    console.log('MEMBERS', members);
    // If we are the second user to connect to the room we will be creating the offer
    const isOfferer = members.length === 2;
    startWebRTC(isOfferer);
  });
});

// Send signaling data via Scaledrone
function sendMessage(message) {
  drone.publish({
    room: roomName,
    message
  });
}

function startWebRTC(isOfferer) {
  pc = new RTCPeerConnection(configuration);

  // 'onicecandidate' notifies us whenever an ICE agent needs to deliver a
  // message to the other peer through the signaling server
  pc.onicecandidate = event => {
    if (event.candidate) {
      sendMessage({'candidate': event.candidate});
    }
  };

  // If user is offerer let the 'negotiationneeded' event create the offer
  if (isOfferer) {
    pc.onnegotiationneeded = () => {
      pc.createOffer().then(localDescCreated).catch(onError);
    }
  }

  // When a remote stream arrives display it in the #remoteVideo element
  pc.ontrack = event => {
    const stream = event.streams[0];
    if (!remoteVideo.srcObject || remoteVideo.srcObject.id !== stream.id) {
      remoteVideo.srcObject = stream;
    }
  };
  
  //if(in_array($this->session->get('auth')['id'], $us_id))
  
  navigator.mediaDevices.getUserMedia({
    audio: true,
    video: true,
  }).then(stream => {
    // Display your local video in #localVideo element
    localVideo.srcObject = stream;
    // Add your stream to be sent to the conneting peer
    stream.getTracks().forEach(track => pc.addTrack(track, stream));
  }, onError);
  // Listen to signaling data from Scaledrone
  room.on('data', (message, client) => {
    // Message was sent by us
    if (client.id === drone.clientId) {
      return;
    }

    if (message.sdp) {
      // This is called after receiving an offer or answer from another peer
      pc.setRemoteDescription(new RTCSessionDescription(message.sdp), () => {
        // When receiving an offer lets answer it
        if (pc.remoteDescription.type === 'offer') {
          pc.createAnswer().then(localDescCreated).catch(onError);
        }
      }, onError);
    } else if (message.candidate) {
      // Add the new ICE candidate to our connections remote description
      pc.addIceCandidate(
        new RTCIceCandidate(message.candidate), onSuccess, onError
      );
    }
  });
}

function localDescCreated(desc) {
  pc.setLocalDescription(
    desc,
    () => sendMessage({'sdp': pc.localDescription}),
    onError
  );
}
  </script>


<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script type="text/javascript"> 
  var msgBox = $('#message-box');
  var wsUri = "ws://localhost:9001/demo/server.php";  
  var staticUri = "<? echo ($this->config->application->staticUri ?? '') ?>";  
  var room1 = '<? echo $room->room_id?>';
  websocket = new WebSocket(wsUri); 
  
  var block = document.getElementById("message-box");
  block.scrollTop = block.scrollHeight;
  
  websocket.onmessage = function(ev) {
    var response    = JSON.parse(ev.data); 
    
     var res_type    = response.type; 
    var user_message  = response.message; 
    var user_name     = response.name; 
   var message_date    = response.date; 
   var room_id = response.room_id; 
   if(room_id==room1)
   if(user_message)
    switch(res_type){
       case 'usermsg':
       msgBox.append('<div class="list-group-item">' + user_name + '<br>' + message_date  + '<br>' + user_message +'</div>');    
        break;
      case 'system':
        msgBox.append('<div class="list-group-item">' + user_message + '</div>');
        break;
    }
msgBox[0].scrollTop = msgBox[0].scrollHeight; 
  };
  
  websocket.onerror = function(ev){ msgBox.append('<div class="system_error">Error Occurred - ' + ev.data + '</div>'); }; 
  websocket.onclose   = function(ev){ msgBox.append('<div class="system_msg">Connection Closed</div>'); }; 

 
  $('#send-message').click(function(){
    var message_input = $('#message');
    sendAjax(message_input.val());
    send_message();    
    event.preventDefault();
  });
  
  
  $( "#message" ).on( "keydown", function( event ) {
    if(event.which==13){
      send_message();
    }
  });
  
 function sendAjax(message) {
                $.ajax({

                url: staticUri + 'message/create/' + room + '/' + message,
                success: function(message) {
                    console.log(message);
                },
                error:function() {
                    alert('Ошибка при отправке ajax запроса');
                    console.log("spec-add ajax error");
                }
            });
        }

  function send_message(){
    var message_input = $('#message'); 
    var name_input = $('#name'); 
    
    if(message_input.val() == ""){ 
      alert("Введите сообщение!");
      return;
    }
    
    var msg = {
      message: message_input.val(),
      name: name_input.val(),
      date : '<? echo date("Y-m-d H:i:s")?>',
      room_id: '<? echo $room->room_id?>'
    };
    websocket.send(JSON.stringify(msg));  
    message_input.val(''); 
  }
</script>